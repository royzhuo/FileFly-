//
//  fileGuanLi.m
//  FileFly
//
//  Created by jx on 16/5/5.
//  Copyright © 2016年 jx. All rights reserved.
//

#import "fileGuanLi.h"
#import "Files.h"
#import "PreviewController.h"
#import "TextViewController.h"
const NSString *identifier=@"collectionViewCell";

@interface fileGuanLi ()<UICollectionViewDataSource,UICollectionViewDelegate,UICollectionViewDelegateFlowLayout,TextViewDelegate>
{
    ALAssetsLibrary *alibrary;
    
    
    //判断页面是否是编辑状态
    BOOL isCollectionViewEditing;
    //判断是否进行复制操作
    BOOL isCopy;
    UIButton *selectBtn;
    
    
    
}

//文件夹个数
@property(nonatomic,strong) NSMutableArray *foders;
//文件夹名称
@property(nonatomic,copy) NSString *foderName;
//文件名称
@property(nonatomic,copy) NSString *fileName;
//当前文件地址
@property(nonatomic,copy) NSString *currentPath;
//装配临时文件的集合
@property(nonatomic,copy) NSMutableArray *tempFilePaths;
//临时文件的地址
@property(nonatomic,copy) NSString *tempFilePath;
//临时地址
@property(nonatomic,copy) NSMutableArray  *tempPaths;




@end

@implementation fileGuanLi

- (void)viewDidLoad {
    [super viewDidLoad];
    self.navigationItem.title=@"文件编辑器";
    //collectionview背景颜色
    self.collectionView.backgroundColor=[UIColor whiteColor];
    //导航栏右边按钮
    selectBtn=[[UIButton alloc]initWithFrame:CGRectMake(0, 0, 60, 30)];
    [selectBtn setTitle:@"编辑" forState:UIControlStateNormal];
    [selectBtn setTitle:@"确定" forState:UIControlStateSelected];
    [selectBtn addTarget:self action:@selector(selectBtnAction:) forControlEvents:UIControlEventTouchUpInside];
    UIBarButtonItem *rightBtn=[[UIBarButtonItem alloc]initWithCustomView:selectBtn];
    //导航栏返回按钮
    UIButton *leftBtn=[[UIButton alloc]initWithFrame:CGRectMake(0, 0, 20, 20)];
    [leftBtn setImage:[UIImage imageNamed:@"houtui_hei_icon"] forState:UIControlStateNormal];
    [leftBtn addTarget:self action:@selector(back:) forControlEvents:UIControlEventTouchUpInside];
    //leftBtn.hidden=YES;
    UIBarButtonItem *leftBtnItem=[[UIBarButtonItem alloc]initWithCustomView:leftBtn];
    
    self.navigationItem.rightBarButtonItem=rightBtn;
    self.navigationItem.leftBarButtonItem=leftBtnItem;
    
    self.toolView.hidden=YES;
    
    isCollectionViewEditing=NO;
    isCopy=NO;
    
    //程序根目录
    //NSString *homePath=NSHomeDirectory();
    
    //获取document目录
    NSArray *paths=NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    NSString *docPath=[paths lastObject];
    _currentPath=docPath;
    
    //创建相簿文件夹
    NSString *forderName=@"相簿";
    BOOL isExisit=[self isExsitForder:forderName withPath:_currentPath];
    if(isExisit == NO) [self createForderByForderName:forderName withPath:_currentPath];
    //    [self createForderByForderName:forderName withPath:_currentPath];
    //获取Library目录
    //    NSArray *paths=NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES);
    //    NSString *librayPath=[paths lastObject];
    
    //获取Library中的Cache
    //    NSArray *path=NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);
    //    NSString *cachePath=[path lastObject];
    [self getFoderName:docPath];
    
    //[self.collectionView registerClass:[UICollectionViewCell class] forCellWithReuseIdentifier:identifier];
    
    
    
}


#pragma mark collectionview协议
//定义展示的UICollectionViewCell的个数
-(NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section
{
    return self.foders.count;
}


//每个UICollectionView展示的内容
-(UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath
{
    
    //static NSString *identified=@"collectionViewCell";
    UICollectionViewCell *cell=[collectionView dequeueReusableCellWithReuseIdentifier:identifier forIndexPath:indexPath];
    if (!cell) {
        
    }
    
    NSLog(@"对象是否是file:%@",[self.foders[indexPath.row] class]);
    if ([self.foders[indexPath.row] class] == [Files class]) {
        Files *file=[self.foders objectAtIndex:indexPath.row];
        file.imageName=[self getFileImage:file.fileName];
        UIImageView *imageView=[cell viewWithTag:1000];
        imageView.image=[UIImage imageNamed:file.imageName];
        
        UILabel *label=[cell viewWithTag:2000];
        label.text=file.fileName;
        label.numberOfLines=0;
    }else if ([self.foders[indexPath.row] class] ==[ALAsset class]){
        ALAsset *alasset=self.foders[indexPath.row];
        NSString *type=[alasset valueForProperty:ALAssetPropertyType];
        if ([type isEqualToString:ALAssetTypePhoto]) {
            NSLog(@"照片");
        }
        CGImageRef *cif=  [alasset thumbnail];
        UIImage *imag=[UIImage imageWithCGImage:cif];
        UIImageView *imageview=[cell viewWithTag:1000];
        imageview.image=imag;
        UILabel *label=[cell viewWithTag:2000];
        NSURL *url=alasset.defaultRepresentation.url;
        label.text=[url absoluteString];
        
    }
    //打勾
    UIImageView *dagouView=[cell viewWithTag:3000];
    CGRect frame=dagouView.frame;
    dagouView.hidden=YES;
    
    
    return cell;
}


//定义每个UICollectionView 的大小
//- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath
//{
//    return CGSizeMake(70, 100);
//}

//UICollectionView被选中时调用的方法
-(void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    [collectionView deselectItemAtIndexPath:indexPath animated:YES];
    UICollectionViewCell *cell=[collectionView cellForItemAtIndexPath:indexPath];
    UIImageView *imageView=[cell viewWithTag:1000];
    UILabel *label=[cell viewWithTag:2000];
    NSLog(@"class is %@",[_foders[indexPath.row] class]);
    //Files *file=_foders[indexPath.row];
    NSLog(@"fileName:%@",label.text);
    NSString *fileName=label.text;
    if (isCollectionViewEditing==YES && isCopy==NO) {
        //打勾view
        UIImageView *dagouView=[cell viewWithTag:3000];
        if(dagouView.hidden==YES) {
            dagouView.hidden=NO;
            if([_foders[indexPath.row] class]==[Files class]) [self.tempFilePaths addObject:_foders[indexPath.row]];
            
        }
        else if(dagouView.hidden==NO) {
            dagouView.hidden=YES;
            if([_foders[indexPath.row] class]==[Files class]) [self.tempFilePaths removeObject:_foders[indexPath.row]];
            
        }
        
        
    }else if (isCollectionViewEditing==NO || isCopy==YES){
        if ([[fileName pathExtension] isEqualToString:@""]||[[fileName pathExtension] isEqualToString:@"FileFly"]) {
            //打开目录
            _currentPath=[_currentPath stringByAppendingPathComponent:fileName];//file.filePath;
            [self getFoderName:_currentPath];
        }else{
            //读取文件
            [self readFile:label.text];
        }
    }
    
    
    
}

//返回这个UICollectionView是否可以被选择
-(BOOL)collectionView:(UICollectionView *)collectionView shouldSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    //NSLog(@"是否可编辑");
    return YES;
}

//设置元素的边框大小
-(UIEdgeInsets)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout insetForSectionAtIndex:(NSInteger)section
{
    UIEdgeInsets top = {10,5,1,5};  //{10,8,1,5};
    return top;
}

-(void)getTextViewContent:(NSString *)content withTitle:(NSString *)titleName
{
    NSFileHandle *outFile;
    //NSString *fileName=[NSString stringWithFormat:@"%@.txt",titleName];
    NSString *fullFileName=[_currentPath stringByAppendingPathComponent:titleName];
    
    outFile=[NSFileHandle fileHandleForWritingAtPath:fullFileName];
    NSData *contenData=[content dataUsingEncoding:NSUTF8StringEncoding];
    [outFile writeData:contenData];
    
    [outFile closeFile];
    
}

#pragma mark 懒加载
-(NSArray *)foders{
    if (_foders==nil) {
        _foders=[NSMutableArray array];
    }
    return _foders;
}
-(NSArray *) tempFilePaths{
    if (_tempFilePaths==nil) {
        NSMutableArray *array=[NSMutableArray array];
        _tempFilePaths=array;
    }
    return _tempFilePaths;
}
-(NSArray *) tempPaths{
    if (_tempPaths==nil) {
        NSMutableArray *array=[NSMutableArray array];
        _tempPaths=array;
    }
    return _tempPaths;
}


#pragma mark 获取文件夹url
-(void)getFoderName:(NSString *)foderPath
{
    
    NSArray *paths=NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    NSString *docPath=[paths lastObject];
    //if (![docPath isEqualToString:foderPath]) leftBtn.hidden=NO;
    NSFileManager *fileManager=[NSFileManager defaultManager];
    NSArray *files= [fileManager directoryContentsAtPath:foderPath];
    [self.foders removeAllObjects];
    
    if ([foderPath.lastPathComponent isEqualToString:@"相簿"]) {
        
        //创建相簿库
        alibrary=[[ALAssetsLibrary alloc]init];
        //遍历相簿库内的所有文件夹
        [alibrary enumerateGroupsWithTypes:ALAssetsGroupAll usingBlock:^(ALAssetsGroup *group, BOOL *stop) {
            if (group) {
                NSLog(@"group:%@\n",group);
                //遍历文件夹中的资源
                [group enumerateAssetsUsingBlock:^(ALAsset *result, NSUInteger index, BOOL *stop) {
                    //index表示它的位置
                    //判断资源类型
                    if ([result valueForProperty:ALAssetTypePhoto]) {
                        //缩略图
                        [self.foders addObject:result];
                        
                    }
                    
                }];
                
                
            }
            
            [self.collectionView reloadData];
        } failureBlock:^(NSError *error) {
            NSLog(@"相片获取失败");
        }];
        
        
        
    }else{
        
        //if (files.count ==0) return;
        
        
        for (NSString *forderName in files) {
            NSString *fullName=[foderPath stringByAppendingString:[NSString stringWithFormat:@"/%@",forderName]];
            Files *file=[Files FileWithFileName:forderName withImage:nil withFilePath:fullName];
            [self.foders addObject:file];
        }
        [self.collectionView reloadData];[self.collectionView reloadData];
    }
    
    
    
    
}

#pragma mark 设置文件图片
-(NSString *)getFileImage:(NSString *) fileName
{
    NSString *extension=[fileName pathExtension];
    NSArray *imageExtensions=@[@"jpg",@"png",@"jpeg"];
    NSArray *yasuobaos=@[@"zip",@"rap"];
    NSArray *txtTypes=@[@"txt",@"java",@"plist"];
    NSArray *wordTypes=@[@"doc",@"docx"];
    if (![extension isEqualToString:@""]) {
        if ([imageExtensions containsObject:extension]==YES ) {
            return fileName;
        }else if ([wordTypes containsObject:extension]==YES){
            return @"wordIcon";
        }else if ([extension isEqualToString:@"excel"]){
            return @"excelIcon";
        }else if ([extension isEqualToString:@"ppt"]){
            return @"pptIcon";
        }else if ([txtTypes containsObject:extension]==YES){
            return @"txtIcon";
        }else if ([yasuobaos containsObject:extension]==YES){
            return @"2";
        }else{
            return @"wenjian";
        }
    }else return @"wenjian";
    
}

#pragma mark 按钮编辑
-(void) selectBtnAction:(UIButton *) button
{
    button.selected=!button.selected;
    if (button.selected==YES) {
        [button setTitle:@"确定" forState:UIControlStateNormal];
        [UIView animateWithDuration:0.5f animations:^{
            self.toolView.alpha=0;
            self.toolView.frame=CGRectMake(0, self.view.frame.size.height, self.toolView.frame.size.width, self.toolView.frame.size.height);
        } completion:^(BOOL finished) {
            isCollectionViewEditing=YES;
            self.toolView.hidden=NO;
            self.toolView.alpha=1;
            self.toolView.frame=CGRectMake(0, self.view.frame.size.height-self.toolView.frame.size.height, self.toolView.frame.size.width, self.toolView.frame.size.height);
            
        }];
        
        //        if(_tempFilePaths.count==0) self.deleteBtn.enabled=NO;
        //        if(_tempFilePaths.count>0)self.deleteBtn.enabled=YES;
        
    }else{
        [button setTitle:@"编辑" forState:UIControlStateNormal];
        self.toolView.hidden=YES;
        isCollectionViewEditing=NO;
        [self.collectionView reloadData];
    }
    
}

#pragma mark 功能菜单功能


- (IBAction)reName:(id)sender {
    NSFileManager *fm=[NSFileManager defaultManager];
    NSLog(@"当前路径:%@",_currentPath);
    if (self.tempFilePaths.count==0) {
        UIAlertView *alert=[[UIAlertView alloc]initWithTitle:@"信息" message:@"请选择文件" delegate:nil cancelButtonTitle:nil otherButtonTitles:@"好的", nil];
        [alert show];
        return ;
    }
    Files *file;
    for (int i=0; i<_tempFilePaths.count; i++) {
        if ([_tempFilePaths[i] class]==[Files class]) {
            file=_tempFilePaths[i];
        }
    }
    UIAlertController *alert=[UIAlertController alertControllerWithTitle:@"文件名" message:nil preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction *cancelAction=[UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleDefault handler:nil];
    UIAlertAction *confirmAction=[UIAlertAction actionWithTitle:@"确定" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        NSString *newFileName=[NSString stringWithFormat:@"%@.txt",self.fileName];
        NSString *newFilePath=[_currentPath stringByAppendingPathComponent:newFileName];
        BOOL isReName= [fm moveItemAtPath:file.filePath toPath:newFilePath error:nil];
        if (isReName==YES) {
            [self getFoderName:_currentPath];
        }
    }];
    
    [alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {
        NSString *name=[file.fileName stringByDeletingPathExtension];
        textField.text=name;
        [textField addTarget:self action:@selector(getNewName:) forControlEvents:UIControlEventEditingChanged];
    }];
    [alert addAction:cancelAction];
    [alert addAction:confirmAction];
    [self presentViewController:alert animated:YES completion:nil];
    
}

- (IBAction)deleteAll:(id)sender {
    NSFileManager *fileManager=[NSFileManager defaultManager];
    NSLog(@"当前路径:%@",_currentPath);
    for  (Files *file in _foders) {
        BOOL isRemove= [fileManager removeItemAtPath:file.filePath error:nil];
        if (isRemove==NO) {
            NSLog(@"删除失败");
        }
    }
    
    [self getFoderName:_currentPath];
}

//新建文件
- (IBAction)createFile:(id)sender {
    //    UIAlertView *alertView=[[UIAlertView alloc]initWithTitle:@"新建文件" message:@"aaa" delegate:self cancelButtonTitle:@"取消" otherButtonTitles:@"确定", nil];
    //    [alertView show];
    
    UIAlertController *alertController=[UIAlertController alertControllerWithTitle:@"新建文件" message:@"写入文件名" preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction *cancelAction=[UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleCancel handler:nil];
    UIAlertAction *conFirmAction=[UIAlertAction actionWithTitle:@"确定" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        [[NSNotificationCenter defaultCenter] removeObserver:self name:UITextFieldTextDidChangeNotification object:nil];
        [self createFileByFileName:_fileName];
        
        
    }];
    conFirmAction.enabled=NO;
    
    [alertController addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {
        textField.placeholder=@"填写文件名";
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(alertTextFieldDidChange:) name:UITextFieldTextDidChangeNotification  object:textField];
    }];
    [alertController addAction:cancelAction];
    [alertController addAction:conFirmAction];
    [self presentViewController:alertController animated:YES completion:nil];
    
}
//新建文件夹
- (IBAction)createForder:(id)sender {
    UIAlertController *alertController=[UIAlertController alertControllerWithTitle:@"新建文件夹" message:nil preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction *cancelAction=[UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleCancel handler:nil];
    UIAlertAction *conFirmAction=[UIAlertAction actionWithTitle:@"确定" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        [[NSNotificationCenter defaultCenter] removeObserver:self name:UITextFieldTextDidChangeNotification object:nil];
        //获取document路径
        NSArray *paths=NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
        NSString *docPath=[paths lastObject];
        if ([_currentPath isEqualToString:docPath]&& [self isExsitForder:_foderName withPath:_currentPath]==YES) {
            UIAlertView *alert=[[UIAlertView alloc]initWithTitle:@"信息" message:@"文件夹重名" delegate:nil cancelButtonTitle:nil otherButtonTitles:@"好的", nil];
            [alert show];
        }else [self createForderByForderName:_foderName withPath:_currentPath];
        
        
    }];
    conFirmAction.enabled=NO;
    //按钮
    [alertController addAction:cancelAction];
    [alertController addAction:conFirmAction];
    //文本
    [alertController addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {
        textField.placeholder=@"请输入文件夹名称";
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(alertTextFieldDidChange:) name:UITextFieldTextDidChangeNotification object:textField];
    }];
    
    [self presentViewController:alertController animated:YES completion:nil];
    
}

- (IBAction)deleteFile:(id)sender {
    NSFileManager *fm=[NSFileManager defaultManager];
    NSLog(@"当前路径:%@",_currentPath);
    NSError *error;
    if(_tempFilePaths.count==0){
        UIAlertView *alert=[[UIAlertView alloc]initWithTitle:@"信息" message:@"请选择文件" delegate:nil cancelButtonTitle:nil otherButtonTitles:@"好的", nil];
        [alert show];
        return ;
    }
    for (int i=0; i<_tempFilePaths.count; i++) {
        if ([Files class]== [_tempFilePaths[i] class]) {
            Files *file=_tempFilePaths[i];
            [fm removeItemAtPath:file.filePath error:&error];
            [_foders removeObject:file];
        }
    }
    [_tempFilePaths removeAllObjects];
    [self.collectionView reloadData];
    
}

- (IBAction)moreMenus:(id)sender {
}

- (IBAction)copyFile:(id)sender {
    UIButton *button=(UIButton *)sender;
    NSFileManager *fm=[NSFileManager defaultManager];
    NSLog(@"当前路径:%@",_currentPath);
    if (isCopy==NO) {
        if (self.tempFilePaths.count==0) {
            UIAlertView *alert=[[UIAlertView alloc]initWithTitle:@"信息内容" message:@"请选择文件" delegate:nil cancelButtonTitle:nil otherButtonTitles:@"好的", nil];
            [alert show];
            return;
        }
        
        for (int i=0; i<_tempFilePaths.count; i++) {
            if ([Files class]==[_tempFilePaths[i] class]) {
                Files *file=_tempFilePaths[i];
                [self.tempPaths addObject:file.filePath];
            }
        }
        [self copyFile:button withPath:nil];
        [_tempFilePaths removeAllObjects];
    }else if (isCopy==YES){
        if(self.tempPaths.count == 0) return;
        for (NSString *path in self.tempPaths) {
            NSString *fileName=[path lastPathComponent];
            NSString *finalPath=[_currentPath stringByAppendingPathComponent:fileName];
            [fm copyItemAtPath:path toPath:finalPath error:nil];
        }
        [self.tempPaths removeAllObjects];
        [button setTitle:@"复制" forState:UIControlStateNormal];
        isCopy=NO;
        [self getFoderName:_currentPath];
        
        
    }
    
    
}

-(void)copyFile:(UIButton *) btn withPath:(NSString *)path
{
    btn.selected=!btn.selected;
    if (btn.selected==YES) {
        [btn setTitle:@"粘贴" forState:UIControlStateNormal];
        isCopy=YES;
        //_tempFilePath=path;
    }else if (btn.selected==NO){
        [btn setTitle:@"复制" forState:UIControlStateNormal];
        isCopy=NO;
    }
}

- (IBAction)moveFile:(id)sender {
}

//激活确定按钮
-(void)alertTextFieldDidChange:(NSNotification *) nsNotification
{
    
    UIAlertController *alertController=(UIAlertController *)self.presentedViewController;
    if (alertController) {
        UITextField *forderField=alertController.textFields.firstObject;
        UIAlertAction *okAction=alertController.actions.lastObject;
        okAction.enabled=forderField.text.length>0;
        if(okAction.enabled==YES) {
            if ([alertController.title isEqualToString:@"新建文件夹"]) _foderName=forderField.text;
            else _fileName=forderField.text;
        }
    }
    
}

//创建文件夹
-(void) createForderByForderName:(NSString *)forderName withPath:(NSString *) path
{
    NSLog(@"name:%@",forderName);
    NSFileManager *fm=[NSFileManager defaultManager];
    
    NSData *foderData=[forderName dataUsingEncoding:NSUTF8StringEncoding];
    NSString *forderPath=[path stringByAppendingPathComponent:forderName];
    //创建文件夹
    BOOL isCreate=[fm createDirectoryAtPath:forderPath attributes:nil];
    if (isCreate==NO) {
        NSLog(@"文件创建失败");
    }else{
        
        [self getFoderName:path];
    }
    
}

//新建文件
-(void) createFileByFileName:(NSString *) fileName
{
    NSString *newFileName=[NSString stringWithFormat:@"%@.txt",fileName];
    NSFileManager *fileManager=[NSFileManager defaultManager];
    for (int i=0; i<self.foders.count; i++) {
        Files *file=self.foders[i];
        if ([newFileName isEqualToString:file.fileName]) {
            newFileName=[NSString stringWithFormat:@"%@(%d).txt",fileName,i+1];
        }
    }
    
    NSString *path=[_currentPath stringByAppendingPathComponent:newFileName];
    
    BOOL isSuccess= [fileManager createFileAtPath:path contents:nil attributes:nil];
    if (isSuccess==YES) {
        TextViewController *textViewController=[ViewControllerByStory initViewControllerWithStoryBoardName:@"Main" withViewId:@"textView"];
        textViewController.titleName=newFileName;
        textViewController.delegate=self;
        [self.navigationController presentViewController:textViewController animated:YES completion:nil];
        //再次读取当前路径
        [self getFoderName:_currentPath];
        _toolView.hidden=YES;
        isCollectionViewEditing=NO;
        [selectBtn setTitle:@"编辑" forState:UIControlStateNormal];
    }
    
    
}

//读取文件
-(void)readFile:(NSString *)fullFileName
{
    //    NSFileHandle *inFile,*outFile;
    //    //输入流
    //    inFile=[NSFileHandle fileHandleForReadingAtPath:fullFileName];
    //    if (inFile==nil) {
    //        NSLog(@"文件读取失败");
    //    }else{
    //    //写入数据
    //        outFile=[NSFileHandle fileHandleForWritingAtPath:fullFileName];
    //        NSString *content=@"zheng yang tao sha bi a";
    //        NSData *data=[content dataUsingEncoding:NSUTF8StringEncoding];
    //        [outFile writeData:data];
    //
    //        //读取数据
    //      NSData *readData=  [inFile readDataToEndOfFile];
    //        NSString *readString=[[NSString alloc]initWithData:readData encoding:NSUTF8StringEncoding];
    //        NSLog(@"文件数据:%@",readString);
    //
    //    }
    //    [outFile closeFile];
    //    [inFile closeFile];
    
    _fileName=[_currentPath stringByAppendingPathComponent:fullFileName];
    
    NSLog(@"当前路径 is :%@",_fileName);
    PreviewController *p=[[UIStoryboard storyboardWithName:@"Main" bundle:nil] instantiateViewControllerWithIdentifier:@"preView"];
    p.filePath=_fileName;
    
    [self.navigationController pushViewController:p animated:YES];
}


//是否存在相同的文件夹
-(BOOL) isExsitForder:(NSString *)forderName withPath:(NSString *)path
{
    NSFileManager *fm=[NSFileManager defaultManager];
    NSString *fulDirectory=[path stringByAppendingPathComponent:forderName];
    BOOL isDir=YES;
    return [fm fileExistsAtPath:fulDirectory isDirectory:&isDir];
}

//菜单返回上一级目录
-(void)back:(UIButton *) button
{
    //获取上一级路径
    NSString *tmpUrl=[_currentPath stringByDeletingLastPathComponent];
    _currentPath=tmpUrl;
    [self getFoderName:tmpUrl];
}

//获取新文件名
-(void)getNewName:(UITextField *)textField
{
    //NSLog(@"textFile is %@",textField.text);
    self.fileName=textField.text;
}



#pragma mark 没用
-(void) testBianLi{
    NSString *path=NSHomeDirectory();
    NSLog(@"path%@",path);
    
    NSFileManager *fileManager=[NSFileManager defaultManager];
    NSString *currentFile=[fileManager currentDirectoryPath];
    NSLog(@"但前目录:%@ \n",currentFile);
    NSArray *fileList=[[NSArray alloc]init];
    //遍历文件夹下的所有信息
    fileList=[fileManager contentsOfDirectoryAtPath:@"/Users/Roy/Downloads" error:nil];
    NSLog(@"downloads:%@ \n",fileList);
    
    //遍历所有文件夹
    //NSArray *files=[fileManager directoryContentsAtPath:@"/Users/Roy/Downloads"];
    NSString *path2=@"/Users/Roy/Documents/personal/roy/src/jsp";
    // NSLog(@"文件夹:%@",[self getFoderName:path2]);
    
    
    //打印带有后缀的文件
    NSArray *fileshou=[[fileManager directoryContentsAtPath:@"/Users/Roy/Downloads"]pathsMatchingExtensions:[NSArray arrayWithObject:@""]];
    NSLog(@"读取java文件:%@",fileshou);
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}


@end
